{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","role","htmlFor","toUpperCase","TextForm","sentence","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","heading","style","backgroundColor","color","value","onChange","event","target","rows","upText","showAlert","toLowerCase","split","i","length","charAt","slice","join","document","getElementById","select","navigator","clipboard","writeText","newText","Alert","alert","words","lower","capatilize","message","defaultProps","App","setMode","_useState3","_useState4","setAlert","setTimeout","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.67c0dbc5.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg bg-${props.mode} navbar-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        {/* <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link> */}\r\n        <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              {/* <Link className=\"nav-link active mx-2\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n              <a className=\"nav-link active mx-2\" aria-current=\"page\" href=\"#\">Home</a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              {/* <Link className=\"nav-link mx-2\" to=\"/about\">About</Link> */}\r\n              <a className=\"nav-link mx-2\" href=\"#\">About</a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              {/* <Link className=\"nav-link mx-2\" to=\"/\">Contact</Link> */}\r\n              <a className=\"nav-link mx-2\" href=\"#\">Contact</a>\r\n            </li>\r\n          </ul>\r\n          {/* <form className=\"d-flex\" role=\"search\">\r\n            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n            <button className=\"btn btn-outline-light\" type=\"submit\">Search</button>\r\n          </form> */}\r\n          <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n            <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{props.mode.toUpperCase() + \" Mode\"}</label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired // can add .isRequired to get error in console if not passed by default.\r\n}\r\n\r\nNavbar.defaultProps = {\r\n  title: \"{title here}\"\r\n}","import React, { useState } from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = () => {\r\n        const upText = text.toUpperCase();\r\n        setText(upText);\r\n        props.showAlert(\"Converted to Uppercase!\", \"success\");\r\n    }\r\n    const handleLpClick = () => {\r\n        const upText = text.toLowerCase();\r\n        setText(upText);\r\n        props.showAlert(\"Converted to Lowercase!\", \"success\");\r\n    }\r\n    const handleTpClick = () => {\r\n        var sentence = text.toLowerCase().split(\" \");\r\n        for (var i = 0; i < sentence.length; i++) {\r\n            sentence[i] = sentence[i].charAt(0).toUpperCase() + sentence[i].slice(1);\r\n        }\r\n        setText(sentence.join(\" \"));\r\n        props.showAlert(\"Converted to Titlecase!\", \"success\");\r\n    }\r\n    const handleClearClick = () => {\r\n        setText(\"\");\r\n    }\r\n    const handleCopy = () => {\r\n        var text = document.getElementById('myBox');\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Text copied!\", \"success\");\r\n    }\r\n    const handleExtraSpace = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Extra spaces removed!\", \"success\");\r\n    }\r\n    const handleOnChange = (event) => {\r\n        setText(event.target.value);\r\n    }\r\n    const wordCount = (sentence) => {\r\n        if (sentence === \"\") {\r\n            return 0;\r\n        } else {\r\n            if (sentence[-1] === \" \") {\r\n                return text.split(\" \").length - 1;\r\n            } else {\r\n                return text.split(\" \").length;\r\n            }\r\n        }\r\n    }\r\n    const [text, setText] = useState(\"\");\r\n    return (\r\n        <>\r\n            <div className='container'>\r\n                <h1>{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control\" id=\"myBox\" style={{ backgroundColor: props.mode === 'dark' ? '#B2B2B2' : 'white', color: props.mode === 'dark' ? 'white' : 'black' }} value={text} onChange={handleOnChange} rows=\"10\"></textarea>\r\n                </div>\r\n                <button className=\"btn btn-primary me-3\" onClick={handleUpClick} >Uppercase</button>\r\n                <button className=\"btn btn-warning me-3\" onClick={handleLpClick} >Lowercase</button>\r\n                <button className=\"btn btn-success me-3\" onClick={handleTpClick} >Titlecase</button>\r\n                <button className=\"btn btn-light me-3\" onClick={handleCopy} >Copy</button>\r\n                <button className=\"btn btn-dark me-3\" onClick={handleExtraSpace} >Remove Extra Space</button>\r\n                <button className=\"btn btn-danger me-3\" onClick={handleClearClick} >Clear</button>\r\n            </div>\r\n            <div className=\"container my-3\">\r\n                <h2>Your text summary</h2>\r\n                <p>{wordCount(text)} words and {text.length} characters</p>\r\n                <p>{0.008 * text.split(\" \").length} minutes read</p>\r\n                <h2>Preview</h2>\r\n                <p>{text.length > 0 ? text : \"Enter some text above to preview here.\"}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capatilize = (words) => {\r\n        const lower = words.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capatilize(props.alert.type)}</strong> : {props.alert.message}\r\n        </div>\r\n    )\r\n}\r\n","import './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\nimport React, { useState } from 'react';\n// import {\n//   BrowserRouter as Router,\n//   Routes,\n//   Route\n// } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      message: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = '#393E46';\n      document.body.style.color = '#fff';\n      showAlert(\"Dark mode has been enabled.\", \"success\");\n    } else {\n      setMode('light');\n      document.body.style.backgroundColor = '#fff';\n      document.body.style.color = '#000';\n      showAlert(\"Light mode has been enabled.\", \"success\");\n    }\n  }\n  return (\n    <>\n      {/* <Router> */}\n        <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n        <Alert alert={alert} />\n        <div className='container my-3'>\n          {/* <Routes> */}\n            {/* <Route exact path=\"/about\" element={<About mode={mode} />}> */}\n            {/* </Route> */}\n            {/* <Route exact path=\"/\" element={<TextForm heading='Enter the text to analyze below ⬇️' mode={mode} showAlert={showAlert} />}> */}\n            {/* </Route> */}\n            <TextForm heading='Enter the text to analyze below ⬇️' mode={mode} showAlert={showAlert} />\n          {/* </Routes> */}\n        </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}